// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "My API": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/linh-snoopy/go-examples/goatest/design
// --out=c:\Users\LENOVO\go\src\github.com\linh-snoopy\go-examples\goatest
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// AddUsersContext provides the Users add action context.
type AddUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *User
}

// NewAddUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the Users controller add action.
func NewAddUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *AddUsersContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// DetailUsersContext provides the Users detail action context.
type DetailUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewDetailUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the Users controller detail action.
func NewDetailUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*DetailUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DetailUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DetailUsersContext) OK(r *MyUser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "vnd.my.user")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListUsersContext provides the Users list action context.
type ListUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the Users controller list action.
func NewListUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OK(r MyUserCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "vnd.my.user; type=collection")
	}
	if r == nil {
		r = MyUserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
