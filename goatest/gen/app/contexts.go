// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "My API": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/linh-snoopy/go-examples/goatest/design
// --out=c:\Users\LENOVO\go\src\github.com\linh-snoopy\go-examples\goatest\gen
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// SumOperandsContext provides the Operands sum action context.
type SumOperandsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Left  int
	Right int
}

// NewSumOperandsContext parses the incoming request URL and body, performs validations and creates the
// context used by the Operands controller sum action.
func NewSumOperandsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SumOperandsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SumOperandsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLeft := req.Params["left"]
	if len(paramLeft) > 0 {
		rawLeft := paramLeft[0]
		if left, err2 := strconv.Atoi(rawLeft); err2 == nil {
			rctx.Left = left
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("left", rawLeft, "integer"))
		}
	}
	paramRight := req.Params["right"]
	if len(paramRight) > 0 {
		rawRight := paramRight[0]
		if right, err2 := strconv.Atoi(rawRight); err2 == nil {
			rctx.Right = right
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("right", rawRight, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SumOperandsContext) OK(r *MyResult) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "vnd.my.result")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKExtended sends a HTTP response with status code 200.
func (ctx *SumOperandsContext) OKExtended(r *MyResultExtended) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "vnd.my.result")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Add222UsersContext provides the Users add222 action context.
type Add222UsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *User
}

// NewAdd222UsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the Users controller add222 action.
func NewAdd222UsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*Add222UsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := Add222UsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *Add222UsersContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// DetailUsersContext provides the Users detail action context.
type DetailUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewDetailUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the Users controller detail action.
func NewDetailUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*DetailUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DetailUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DetailUsersContext) OK(r *MyUser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "vnd.my.user")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListUsersContext provides the Users list action context.
type ListUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the Users controller list action.
func NewListUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OK(r MyUserCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "vnd.my.user; type=collection")
	}
	if r == nil {
		r = MyUserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
