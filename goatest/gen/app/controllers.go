// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "My API": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/linh-snoopy/go-examples/goatest/design
// --out=c:\Users\LENOVO\go\src\github.com\linh-snoopy\go-examples\goatest\gen
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// OperandsController is the controller interface for the Operands actions.
type OperandsController interface {
	goa.Muxer
	Sum(*SumOperandsContext) error
}

// MountOperandsController "mounts" a Operands resource controller on the given service.
func MountOperandsController(service *goa.Service, ctrl OperandsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSumOperandsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Sum(rctx)
	}
	service.Mux.Handle("GET", "/results/sum/:left/:right", ctrl.MuxHandler("sum", h, nil))
	service.LogInfo("mount", "ctrl", "Operands", "action", "Sum", "route", "GET /results/sum/:left/:right")
}

// UsersController is the controller interface for the Users actions.
type UsersController interface {
	goa.Muxer
	Add222(*Add222UsersContext) error
	Detail(*DetailUsersContext) error
	List(*ListUsersContext) error
}

// MountUsersController "mounts" a Users resource controller on the given service.
func MountUsersController(service *goa.Service, ctrl UsersController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAdd222UsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*User)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add222(rctx)
	}
	service.Mux.Handle("POST", "/users/add223344", ctrl.MuxHandler("add222", h, unmarshalAdd222UsersPayload))
	service.LogInfo("mount", "ctrl", "Users", "action", "Add222", "route", "POST /users/add223344")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDetailUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Detail(rctx)
	}
	service.Mux.Handle("GET", "/users/detail/:id", ctrl.MuxHandler("detail", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "Detail", "route", "GET /users/detail/:id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	service.Mux.Handle("GET", "/users/list", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "List", "route", "GET /users/list")
}

// unmarshalAdd222UsersPayload unmarshals the request body into the context request data Payload field.
func unmarshalAdd222UsersPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &user{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
