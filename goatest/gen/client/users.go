// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "My API": Users Resource Client
//
// Command:
// $ goagen
// --design=github.com/linh-snoopy/go-examples/goatest/design
// --out=c:\Users\LENOVO\go\src\github.com\linh-snoopy\go-examples\goatest\gen
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// Add222UsersPath computes a request path to the add222 action of Users.
func Add222UsersPath() string {

	return fmt.Sprintf("/users/add223344")
}

// Register a new user
func (c *Client) Add222Users(ctx context.Context, path string, payload *User) (*http.Response, error) {
	req, err := c.NewAdd222UsersRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAdd222UsersRequest create the request corresponding to the add222 action endpoint of the Users resource.
func (c *Client) NewAdd222UsersRequest(ctx context.Context, path string, payload *User) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// DetailUsersPath computes a request path to the detail action of Users.
func DetailUsersPath(id string) string {
	param0 := id

	return fmt.Sprintf("/users/detail/%s", param0)
}

// Get detail of user
func (c *Client) DetailUsers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDetailUsersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDetailUsersRequest create the request corresponding to the detail action endpoint of the Users resource.
func (c *Client) NewDetailUsersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListUsersPath computes a request path to the list action of Users.
func ListUsersPath() string {

	return fmt.Sprintf("/users/list")
}

// List all users
func (c *Client) ListUsers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListUsersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListUsersRequest create the request corresponding to the list action endpoint of the Users resource.
func (c *Client) NewListUsersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
